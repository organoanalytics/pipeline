[
  {
    "model": "snippets.snippet",
    "pk": 1,
    "fields": {
      "created": "2018-01-04T18:09:36.612Z",
      "title": "serializers.py",
      "code": "from django.contrib.auth.models import User, Group\r\nfrom rest_framework import serializers\r\n\r\n\r\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\r\n    class Meta:\r\n        model = User\r\n        fields = ('url', 'username', 'email', 'groups')\r\n\r\n\r\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\r\n    class Meta:\r\n        model = Group\r\n        fields = ('url', 'name')",
      "linenos": false,
      "language": "python",
      "style": "default",
      "owner": [
        "carlton"
      ],
      "highlighted": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n   \"http://www.w3.org/TR/html4/strict.dtd\">\n\n<html>\n<head>\n  <title>serializers.py</title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=None\">\n  <style type=\"text/css\">\ntd.linenos { background-color: #f0f0f0; padding-right: 10px; }\nspan.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }\npre { line-height: 125%; }\nbody .hll { background-color: #ffffcc }\nbody  { background: #f8f8f8; }\nbody .c { color: #408080; font-style: italic } /* Comment */\nbody .err { border: 1px solid #FF0000 } /* Error */\nbody .k { color: #008000; font-weight: bold } /* Keyword */\nbody .o { color: #666666 } /* Operator */\nbody .ch { color: #408080; font-style: italic } /* Comment.Hashbang */\nbody .cm { color: #408080; font-style: italic } /* Comment.Multiline */\nbody .cp { color: #BC7A00 } /* Comment.Preproc */\nbody .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */\nbody .c1 { color: #408080; font-style: italic } /* Comment.Single */\nbody .cs { color: #408080; font-style: italic } /* Comment.Special */\nbody .gd { color: #A00000 } /* Generic.Deleted */\nbody .ge { font-style: italic } /* Generic.Emph */\nbody .gr { color: #FF0000 } /* Generic.Error */\nbody .gh { color: #000080; font-weight: bold } /* Generic.Heading */\nbody .gi { color: #00A000 } /* Generic.Inserted */\nbody .go { color: #888888 } /* Generic.Output */\nbody .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\nbody .gs { font-weight: bold } /* Generic.Strong */\nbody .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\nbody .gt { color: #0044DD } /* Generic.Traceback */\nbody .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\nbody .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\nbody .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\nbody .kp { color: #008000 } /* Keyword.Pseudo */\nbody .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\nbody .kt { color: #B00040 } /* Keyword.Type */\nbody .m { color: #666666 } /* Literal.Number */\nbody .s { color: #BA2121 } /* Literal.String */\nbody .na { color: #7D9029 } /* Name.Attribute */\nbody .nb { color: #008000 } /* Name.Builtin */\nbody .nc { color: #0000FF; font-weight: bold } /* Name.Class */\nbody .no { color: #880000 } /* Name.Constant */\nbody .nd { color: #AA22FF } /* Name.Decorator */\nbody .ni { color: #999999; font-weight: bold } /* Name.Entity */\nbody .ne { color: #D2413A; font-weight: bold } /* Name.Exception */\nbody .nf { color: #0000FF } /* Name.Function */\nbody .nl { color: #A0A000 } /* Name.Label */\nbody .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */\nbody .nt { color: #008000; font-weight: bold } /* Name.Tag */\nbody .nv { color: #19177C } /* Name.Variable */\nbody .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */\nbody .w { color: #bbbbbb } /* Text.Whitespace */\nbody .mb { color: #666666 } /* Literal.Number.Bin */\nbody .mf { color: #666666 } /* Literal.Number.Float */\nbody .mh { color: #666666 } /* Literal.Number.Hex */\nbody .mi { color: #666666 } /* Literal.Number.Integer */\nbody .mo { color: #666666 } /* Literal.Number.Oct */\nbody .sa { color: #BA2121 } /* Literal.String.Affix */\nbody .sb { color: #BA2121 } /* Literal.String.Backtick */\nbody .sc { color: #BA2121 } /* Literal.String.Char */\nbody .dl { color: #BA2121 } /* Literal.String.Delimiter */\nbody .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\nbody .s2 { color: #BA2121 } /* Literal.String.Double */\nbody .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */\nbody .sh { color: #BA2121 } /* Literal.String.Heredoc */\nbody .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */\nbody .sx { color: #008000 } /* Literal.String.Other */\nbody .sr { color: #BB6688 } /* Literal.String.Regex */\nbody .s1 { color: #BA2121 } /* Literal.String.Single */\nbody .ss { color: #19177C } /* Literal.String.Symbol */\nbody .bp { color: #008000 } /* Name.Builtin.Pseudo */\nbody .fm { color: #0000FF } /* Name.Function.Magic */\nbody .vc { color: #19177C } /* Name.Variable.Class */\nbody .vg { color: #19177C } /* Name.Variable.Global */\nbody .vi { color: #19177C } /* Name.Variable.Instance */\nbody .vm { color: #19177C } /* Name.Variable.Magic */\nbody .il { color: #666666 } /* Literal.Number.Integer.Long */\n\n  </style>\n</head>\n<body>\n<h2>serializers.py</h2>\n\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">Group</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">serializers</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">HyperlinkedModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;email&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;groups&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GroupSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">HyperlinkedModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Group</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</body>\n</html>\n"
    }
  },
  {
    "model": "snippets.snippet",
    "pk": 2,
    "fields": {
      "created": "2018-11-29T22:07:06.261Z",
      "title": "Snippet save() Method",
      "code": "def save(self, *args, **kwargs):\r\n        \"\"\"\r\n        Use the `pygments` library to create a highlighted HTML\r\n        representation of the code snippet.\r\n        \"\"\"\r\n        lexer = get_lexer_by_name(self.language)\r\n        linenos = self.linenos and 'table' or False\r\n        options = self.title and {'title': self.title} or {}\r\n        formatter = HtmlFormatter(\r\n            style=self.style, linenos=linenos, full=True, **options)\r\n        self.highlighted = highlight(self.code, lexer, formatter)\r\n        super(Snippet, self).save(*args, **kwargs)",
      "linenos": true,
      "language": "python",
      "style": "friendly",
      "owner": [
        "carlton"
      ],
      "highlighted": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n   \"http://www.w3.org/TR/html4/strict.dtd\">\n\n<html>\n<head>\n  <title>Snippet save() Method</title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=None\">\n  <style type=\"text/css\">\ntd.linenos { background-color: #f0f0f0; padding-right: 10px; }\nspan.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }\npre { line-height: 125%; }\nbody .hll { background-color: #ffffcc }\nbody  { background: #f0f0f0; }\nbody .c { color: #60a0b0; font-style: italic } /* Comment */\nbody .err { border: 1px solid #FF0000 } /* Error */\nbody .k { color: #007020; font-weight: bold } /* Keyword */\nbody .o { color: #666666 } /* Operator */\nbody .ch { color: #60a0b0; font-style: italic } /* Comment.Hashbang */\nbody .cm { color: #60a0b0; font-style: italic } /* Comment.Multiline */\nbody .cp { color: #007020 } /* Comment.Preproc */\nbody .cpf { color: #60a0b0; font-style: italic } /* Comment.PreprocFile */\nbody .c1 { color: #60a0b0; font-style: italic } /* Comment.Single */\nbody .cs { color: #60a0b0; background-color: #fff0f0 } /* Comment.Special */\nbody .gd { color: #A00000 } /* Generic.Deleted */\nbody .ge { font-style: italic } /* Generic.Emph */\nbody .gr { color: #FF0000 } /* Generic.Error */\nbody .gh { color: #000080; font-weight: bold } /* Generic.Heading */\nbody .gi { color: #00A000 } /* Generic.Inserted */\nbody .go { color: #888888 } /* Generic.Output */\nbody .gp { color: #c65d09; font-weight: bold } /* Generic.Prompt */\nbody .gs { font-weight: bold } /* Generic.Strong */\nbody .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\nbody .gt { color: #0044DD } /* Generic.Traceback */\nbody .kc { color: #007020; font-weight: bold } /* Keyword.Constant */\nbody .kd { color: #007020; font-weight: bold } /* Keyword.Declaration */\nbody .kn { color: #007020; font-weight: bold } /* Keyword.Namespace */\nbody .kp { color: #007020 } /* Keyword.Pseudo */\nbody .kr { color: #007020; font-weight: bold } /* Keyword.Reserved */\nbody .kt { color: #902000 } /* Keyword.Type */\nbody .m { color: #40a070 } /* Literal.Number */\nbody .s { color: #4070a0 } /* Literal.String */\nbody .na { color: #4070a0 } /* Name.Attribute */\nbody .nb { color: #007020 } /* Name.Builtin */\nbody .nc { color: #0e84b5; font-weight: bold } /* Name.Class */\nbody .no { color: #60add5 } /* Name.Constant */\nbody .nd { color: #555555; font-weight: bold } /* Name.Decorator */\nbody .ni { color: #d55537; font-weight: bold } /* Name.Entity */\nbody .ne { color: #007020 } /* Name.Exception */\nbody .nf { color: #06287e } /* Name.Function */\nbody .nl { color: #002070; font-weight: bold } /* Name.Label */\nbody .nn { color: #0e84b5; font-weight: bold } /* Name.Namespace */\nbody .nt { color: #062873; font-weight: bold } /* Name.Tag */\nbody .nv { color: #bb60d5 } /* Name.Variable */\nbody .ow { color: #007020; font-weight: bold } /* Operator.Word */\nbody .w { color: #bbbbbb } /* Text.Whitespace */\nbody .mb { color: #40a070 } /* Literal.Number.Bin */\nbody .mf { color: #40a070 } /* Literal.Number.Float */\nbody .mh { color: #40a070 } /* Literal.Number.Hex */\nbody .mi { color: #40a070 } /* Literal.Number.Integer */\nbody .mo { color: #40a070 } /* Literal.Number.Oct */\nbody .sa { color: #4070a0 } /* Literal.String.Affix */\nbody .sb { color: #4070a0 } /* Literal.String.Backtick */\nbody .sc { color: #4070a0 } /* Literal.String.Char */\nbody .dl { color: #4070a0 } /* Literal.String.Delimiter */\nbody .sd { color: #4070a0; font-style: italic } /* Literal.String.Doc */\nbody .s2 { color: #4070a0 } /* Literal.String.Double */\nbody .se { color: #4070a0; font-weight: bold } /* Literal.String.Escape */\nbody .sh { color: #4070a0 } /* Literal.String.Heredoc */\nbody .si { color: #70a0d0; font-style: italic } /* Literal.String.Interpol */\nbody .sx { color: #c65d09 } /* Literal.String.Other */\nbody .sr { color: #235388 } /* Literal.String.Regex */\nbody .s1 { color: #4070a0 } /* Literal.String.Single */\nbody .ss { color: #517918 } /* Literal.String.Symbol */\nbody .bp { color: #007020 } /* Name.Builtin.Pseudo */\nbody .fm { color: #06287e } /* Name.Function.Magic */\nbody .vc { color: #bb60d5 } /* Name.Variable.Class */\nbody .vg { color: #bb60d5 } /* Name.Variable.Global */\nbody .vi { color: #bb60d5 } /* Name.Variable.Instance */\nbody .vm { color: #bb60d5 } /* Name.Variable.Magic */\nbody .il { color: #40a070 } /* Literal.Number.Integer.Long */\n\n  </style>\n</head>\n<body>\n<h2>Snippet save() Method</h2>\n\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Use the `pygments` library to create a highlighted HTML</span>\n<span class=\"sd\">        representation of the code snippet.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">get_lexer_by_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">)</span>\n        <span class=\"n\">linenos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">linenos</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;table&#39;</span> <span class=\"ow\">or</span> <span class=\"bp\">False</span>\n        <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"ow\">and</span> <span class=\"p\">{</span><span class=\"s1\">&#39;title&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">}</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">HtmlFormatter</span><span class=\"p\">(</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"p\">,</span> <span class=\"n\">linenos</span><span class=\"o\">=</span><span class=\"n\">linenos</span><span class=\"p\">,</span> <span class=\"n\">full</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">highlighted</span> <span class=\"o\">=</span> <span class=\"n\">highlight</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">lexer</span><span class=\"p\">,</span> <span class=\"n\">formatter</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Snippet</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></body>\n</html>\n"
    }
  }
]
